// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: runme/parser/v1/parser.proto

package parserv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/kubefill/kubefill/mdx/gen/proto/go/runme/parser/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ParserServiceName is the fully-qualified name of the ParserService service.
	ParserServiceName = "runme.parser.v1.ParserService"
)

// ParserServiceClient is a client for the runme.parser.v1.ParserService service.
type ParserServiceClient interface {
	Deserialize(context.Context, *connect_go.Request[v1.DeserializeRequest]) (*connect_go.Response[v1.DeserializeResponse], error)
	Serialize(context.Context, *connect_go.Request[v1.SerializeRequest]) (*connect_go.Response[v1.SerializeResponse], error)
}

// NewParserServiceClient constructs a client for the runme.parser.v1.ParserService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewParserServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ParserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &parserServiceClient{
		deserialize: connect_go.NewClient[v1.DeserializeRequest, v1.DeserializeResponse](
			httpClient,
			baseURL+"/runme.parser.v1.ParserService/Deserialize",
			opts...,
		),
		serialize: connect_go.NewClient[v1.SerializeRequest, v1.SerializeResponse](
			httpClient,
			baseURL+"/runme.parser.v1.ParserService/Serialize",
			opts...,
		),
	}
}

// parserServiceClient implements ParserServiceClient.
type parserServiceClient struct {
	deserialize *connect_go.Client[v1.DeserializeRequest, v1.DeserializeResponse]
	serialize   *connect_go.Client[v1.SerializeRequest, v1.SerializeResponse]
}

// Deserialize calls runme.parser.v1.ParserService.Deserialize.
func (c *parserServiceClient) Deserialize(ctx context.Context, req *connect_go.Request[v1.DeserializeRequest]) (*connect_go.Response[v1.DeserializeResponse], error) {
	return c.deserialize.CallUnary(ctx, req)
}

// Serialize calls runme.parser.v1.ParserService.Serialize.
func (c *parserServiceClient) Serialize(ctx context.Context, req *connect_go.Request[v1.SerializeRequest]) (*connect_go.Response[v1.SerializeResponse], error) {
	return c.serialize.CallUnary(ctx, req)
}

// ParserServiceHandler is an implementation of the runme.parser.v1.ParserService service.
type ParserServiceHandler interface {
	Deserialize(context.Context, *connect_go.Request[v1.DeserializeRequest]) (*connect_go.Response[v1.DeserializeResponse], error)
	Serialize(context.Context, *connect_go.Request[v1.SerializeRequest]) (*connect_go.Response[v1.SerializeResponse], error)
}

// NewParserServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewParserServiceHandler(svc ParserServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/runme.parser.v1.ParserService/Deserialize", connect_go.NewUnaryHandler(
		"/runme.parser.v1.ParserService/Deserialize",
		svc.Deserialize,
		opts...,
	))
	mux.Handle("/runme.parser.v1.ParserService/Serialize", connect_go.NewUnaryHandler(
		"/runme.parser.v1.ParserService/Serialize",
		svc.Serialize,
		opts...,
	))
	return "/runme.parser.v1.ParserService/", mux
}

// UnimplementedParserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedParserServiceHandler struct{}

func (UnimplementedParserServiceHandler) Deserialize(context.Context, *connect_go.Request[v1.DeserializeRequest]) (*connect_go.Response[v1.DeserializeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runme.parser.v1.ParserService.Deserialize is not implemented"))
}

func (UnimplementedParserServiceHandler) Serialize(context.Context, *connect_go.Request[v1.SerializeRequest]) (*connect_go.Response[v1.SerializeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runme.parser.v1.ParserService.Serialize is not implemented"))
}
