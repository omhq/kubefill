// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: runme/kernel/v1/kernel.proto

package kernelv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/kubefill/kubefill/mdx/gen/proto/go/runme/kernel/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// KernelServiceName is the fully-qualified name of the KernelService service.
	KernelServiceName = "runme.kernel.v1.KernelService"
)

// KernelServiceClient is a client for the runme.kernel.v1.KernelService service.
type KernelServiceClient interface {
	PostSession(context.Context, *connect_go.Request[v1.PostSessionRequest]) (*connect_go.Response[v1.PostSessionResponse], error)
	DeleteSession(context.Context, *connect_go.Request[v1.DeleteSessionRequest]) (*connect_go.Response[v1.DeleteSessionResponse], error)
	ListSessions(context.Context, *connect_go.Request[v1.ListSessionsRequest]) (*connect_go.Response[v1.ListSessionsResponse], error)
	Execute(context.Context, *connect_go.Request[v1.ExecuteRequest]) (*connect_go.Response[v1.ExecuteResponse], error)
	ExecuteStream(context.Context, *connect_go.Request[v1.ExecuteRequest]) (*connect_go.ServerStreamForClient[v1.ExecuteResponse], error)
	Input(context.Context, *connect_go.Request[v1.InputRequest]) (*connect_go.Response[v1.InputResponse], error)
	Output(context.Context, *connect_go.Request[v1.OutputRequest]) (*connect_go.ServerStreamForClient[v1.OutputResponse], error)
	IO(context.Context) *connect_go.BidiStreamForClient[v1.IORequest, v1.IOResponse]
}

// NewKernelServiceClient constructs a client for the runme.kernel.v1.KernelService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKernelServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) KernelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kernelServiceClient{
		postSession: connect_go.NewClient[v1.PostSessionRequest, v1.PostSessionResponse](
			httpClient,
			baseURL+"/runme.kernel.v1.KernelService/PostSession",
			opts...,
		),
		deleteSession: connect_go.NewClient[v1.DeleteSessionRequest, v1.DeleteSessionResponse](
			httpClient,
			baseURL+"/runme.kernel.v1.KernelService/DeleteSession",
			opts...,
		),
		listSessions: connect_go.NewClient[v1.ListSessionsRequest, v1.ListSessionsResponse](
			httpClient,
			baseURL+"/runme.kernel.v1.KernelService/ListSessions",
			opts...,
		),
		execute: connect_go.NewClient[v1.ExecuteRequest, v1.ExecuteResponse](
			httpClient,
			baseURL+"/runme.kernel.v1.KernelService/Execute",
			opts...,
		),
		executeStream: connect_go.NewClient[v1.ExecuteRequest, v1.ExecuteResponse](
			httpClient,
			baseURL+"/runme.kernel.v1.KernelService/ExecuteStream",
			opts...,
		),
		input: connect_go.NewClient[v1.InputRequest, v1.InputResponse](
			httpClient,
			baseURL+"/runme.kernel.v1.KernelService/Input",
			opts...,
		),
		output: connect_go.NewClient[v1.OutputRequest, v1.OutputResponse](
			httpClient,
			baseURL+"/runme.kernel.v1.KernelService/Output",
			opts...,
		),
		iO: connect_go.NewClient[v1.IORequest, v1.IOResponse](
			httpClient,
			baseURL+"/runme.kernel.v1.KernelService/IO",
			opts...,
		),
	}
}

// kernelServiceClient implements KernelServiceClient.
type kernelServiceClient struct {
	postSession   *connect_go.Client[v1.PostSessionRequest, v1.PostSessionResponse]
	deleteSession *connect_go.Client[v1.DeleteSessionRequest, v1.DeleteSessionResponse]
	listSessions  *connect_go.Client[v1.ListSessionsRequest, v1.ListSessionsResponse]
	execute       *connect_go.Client[v1.ExecuteRequest, v1.ExecuteResponse]
	executeStream *connect_go.Client[v1.ExecuteRequest, v1.ExecuteResponse]
	input         *connect_go.Client[v1.InputRequest, v1.InputResponse]
	output        *connect_go.Client[v1.OutputRequest, v1.OutputResponse]
	iO            *connect_go.Client[v1.IORequest, v1.IOResponse]
}

// PostSession calls runme.kernel.v1.KernelService.PostSession.
func (c *kernelServiceClient) PostSession(ctx context.Context, req *connect_go.Request[v1.PostSessionRequest]) (*connect_go.Response[v1.PostSessionResponse], error) {
	return c.postSession.CallUnary(ctx, req)
}

// DeleteSession calls runme.kernel.v1.KernelService.DeleteSession.
func (c *kernelServiceClient) DeleteSession(ctx context.Context, req *connect_go.Request[v1.DeleteSessionRequest]) (*connect_go.Response[v1.DeleteSessionResponse], error) {
	return c.deleteSession.CallUnary(ctx, req)
}

// ListSessions calls runme.kernel.v1.KernelService.ListSessions.
func (c *kernelServiceClient) ListSessions(ctx context.Context, req *connect_go.Request[v1.ListSessionsRequest]) (*connect_go.Response[v1.ListSessionsResponse], error) {
	return c.listSessions.CallUnary(ctx, req)
}

// Execute calls runme.kernel.v1.KernelService.Execute.
func (c *kernelServiceClient) Execute(ctx context.Context, req *connect_go.Request[v1.ExecuteRequest]) (*connect_go.Response[v1.ExecuteResponse], error) {
	return c.execute.CallUnary(ctx, req)
}

// ExecuteStream calls runme.kernel.v1.KernelService.ExecuteStream.
func (c *kernelServiceClient) ExecuteStream(ctx context.Context, req *connect_go.Request[v1.ExecuteRequest]) (*connect_go.ServerStreamForClient[v1.ExecuteResponse], error) {
	return c.executeStream.CallServerStream(ctx, req)
}

// Input calls runme.kernel.v1.KernelService.Input.
func (c *kernelServiceClient) Input(ctx context.Context, req *connect_go.Request[v1.InputRequest]) (*connect_go.Response[v1.InputResponse], error) {
	return c.input.CallUnary(ctx, req)
}

// Output calls runme.kernel.v1.KernelService.Output.
func (c *kernelServiceClient) Output(ctx context.Context, req *connect_go.Request[v1.OutputRequest]) (*connect_go.ServerStreamForClient[v1.OutputResponse], error) {
	return c.output.CallServerStream(ctx, req)
}

// IO calls runme.kernel.v1.KernelService.IO.
func (c *kernelServiceClient) IO(ctx context.Context) *connect_go.BidiStreamForClient[v1.IORequest, v1.IOResponse] {
	return c.iO.CallBidiStream(ctx)
}

// KernelServiceHandler is an implementation of the runme.kernel.v1.KernelService service.
type KernelServiceHandler interface {
	PostSession(context.Context, *connect_go.Request[v1.PostSessionRequest]) (*connect_go.Response[v1.PostSessionResponse], error)
	DeleteSession(context.Context, *connect_go.Request[v1.DeleteSessionRequest]) (*connect_go.Response[v1.DeleteSessionResponse], error)
	ListSessions(context.Context, *connect_go.Request[v1.ListSessionsRequest]) (*connect_go.Response[v1.ListSessionsResponse], error)
	Execute(context.Context, *connect_go.Request[v1.ExecuteRequest]) (*connect_go.Response[v1.ExecuteResponse], error)
	ExecuteStream(context.Context, *connect_go.Request[v1.ExecuteRequest], *connect_go.ServerStream[v1.ExecuteResponse]) error
	Input(context.Context, *connect_go.Request[v1.InputRequest]) (*connect_go.Response[v1.InputResponse], error)
	Output(context.Context, *connect_go.Request[v1.OutputRequest], *connect_go.ServerStream[v1.OutputResponse]) error
	IO(context.Context, *connect_go.BidiStream[v1.IORequest, v1.IOResponse]) error
}

// NewKernelServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKernelServiceHandler(svc KernelServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/runme.kernel.v1.KernelService/PostSession", connect_go.NewUnaryHandler(
		"/runme.kernel.v1.KernelService/PostSession",
		svc.PostSession,
		opts...,
	))
	mux.Handle("/runme.kernel.v1.KernelService/DeleteSession", connect_go.NewUnaryHandler(
		"/runme.kernel.v1.KernelService/DeleteSession",
		svc.DeleteSession,
		opts...,
	))
	mux.Handle("/runme.kernel.v1.KernelService/ListSessions", connect_go.NewUnaryHandler(
		"/runme.kernel.v1.KernelService/ListSessions",
		svc.ListSessions,
		opts...,
	))
	mux.Handle("/runme.kernel.v1.KernelService/Execute", connect_go.NewUnaryHandler(
		"/runme.kernel.v1.KernelService/Execute",
		svc.Execute,
		opts...,
	))
	mux.Handle("/runme.kernel.v1.KernelService/ExecuteStream", connect_go.NewServerStreamHandler(
		"/runme.kernel.v1.KernelService/ExecuteStream",
		svc.ExecuteStream,
		opts...,
	))
	mux.Handle("/runme.kernel.v1.KernelService/Input", connect_go.NewUnaryHandler(
		"/runme.kernel.v1.KernelService/Input",
		svc.Input,
		opts...,
	))
	mux.Handle("/runme.kernel.v1.KernelService/Output", connect_go.NewServerStreamHandler(
		"/runme.kernel.v1.KernelService/Output",
		svc.Output,
		opts...,
	))
	mux.Handle("/runme.kernel.v1.KernelService/IO", connect_go.NewBidiStreamHandler(
		"/runme.kernel.v1.KernelService/IO",
		svc.IO,
		opts...,
	))
	return "/runme.kernel.v1.KernelService/", mux
}

// UnimplementedKernelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedKernelServiceHandler struct{}

func (UnimplementedKernelServiceHandler) PostSession(context.Context, *connect_go.Request[v1.PostSessionRequest]) (*connect_go.Response[v1.PostSessionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runme.kernel.v1.KernelService.PostSession is not implemented"))
}

func (UnimplementedKernelServiceHandler) DeleteSession(context.Context, *connect_go.Request[v1.DeleteSessionRequest]) (*connect_go.Response[v1.DeleteSessionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runme.kernel.v1.KernelService.DeleteSession is not implemented"))
}

func (UnimplementedKernelServiceHandler) ListSessions(context.Context, *connect_go.Request[v1.ListSessionsRequest]) (*connect_go.Response[v1.ListSessionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runme.kernel.v1.KernelService.ListSessions is not implemented"))
}

func (UnimplementedKernelServiceHandler) Execute(context.Context, *connect_go.Request[v1.ExecuteRequest]) (*connect_go.Response[v1.ExecuteResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runme.kernel.v1.KernelService.Execute is not implemented"))
}

func (UnimplementedKernelServiceHandler) ExecuteStream(context.Context, *connect_go.Request[v1.ExecuteRequest], *connect_go.ServerStream[v1.ExecuteResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runme.kernel.v1.KernelService.ExecuteStream is not implemented"))
}

func (UnimplementedKernelServiceHandler) Input(context.Context, *connect_go.Request[v1.InputRequest]) (*connect_go.Response[v1.InputResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runme.kernel.v1.KernelService.Input is not implemented"))
}

func (UnimplementedKernelServiceHandler) Output(context.Context, *connect_go.Request[v1.OutputRequest], *connect_go.ServerStream[v1.OutputResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runme.kernel.v1.KernelService.Output is not implemented"))
}

func (UnimplementedKernelServiceHandler) IO(context.Context, *connect_go.BidiStream[v1.IORequest, v1.IOResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("runme.kernel.v1.KernelService.IO is not implemented"))
}
