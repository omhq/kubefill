/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter output_javascript,optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "runme/kernel/v1/kernel.proto" (package "runme.kernel.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import { KernelService } from "./kernel_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service runme.kernel.v1.KernelService
 */
export class KernelServiceClient {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = KernelService.typeName;
        this.methods = KernelService.methods;
        this.options = KernelService.options;
    }
    /**
     * @generated from protobuf rpc: PostSession(runme.kernel.v1.PostSessionRequest) returns (runme.kernel.v1.PostSessionResponse);
     */
    postSession(input, options) {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteSession(runme.kernel.v1.DeleteSessionRequest) returns (runme.kernel.v1.DeleteSessionResponse);
     */
    deleteSession(input, options) {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListSessions(runme.kernel.v1.ListSessionsRequest) returns (runme.kernel.v1.ListSessionsResponse);
     */
    listSessions(input, options) {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Execute(runme.kernel.v1.ExecuteRequest) returns (runme.kernel.v1.ExecuteResponse);
     */
    execute(input, options) {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ExecuteStream(runme.kernel.v1.ExecuteRequest) returns (stream runme.kernel.v1.ExecuteResponse);
     */
    executeStream(input, options) {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Input(runme.kernel.v1.InputRequest) returns (runme.kernel.v1.InputResponse);
     */
    input(input, options) {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Output(runme.kernel.v1.OutputRequest) returns (stream runme.kernel.v1.OutputResponse);
     */
    output(input, options) {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: IO(stream runme.kernel.v1.IORequest) returns (stream runme.kernel.v1.IOResponse);
     */
    iO(options) {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept("duplex", this._transport, method, opt);
    }
}
