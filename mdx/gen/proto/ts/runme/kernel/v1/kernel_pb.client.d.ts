/* eslint-disable */
// @generated by protobuf-ts 2.8.2 with parameter output_javascript,optimize_code_size,long_type_string,add_pb_suffix,ts_nocheck,eslint_disable
// @generated from protobuf file "runme/kernel/v1/kernel.proto" (package "runme.kernel.v1", syntax proto3)
// tslint:disable
// @ts-nocheck
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import type { IOResponse } from "./kernel_pb";
import type { IORequest } from "./kernel_pb";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { OutputResponse } from "./kernel_pb";
import type { OutputRequest } from "./kernel_pb";
import type { InputResponse } from "./kernel_pb";
import type { InputRequest } from "./kernel_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ExecuteResponse } from "./kernel_pb";
import type { ExecuteRequest } from "./kernel_pb";
import type { ListSessionsResponse } from "./kernel_pb";
import type { ListSessionsRequest } from "./kernel_pb";
import type { DeleteSessionResponse } from "./kernel_pb";
import type { DeleteSessionRequest } from "./kernel_pb";
import type { PostSessionResponse } from "./kernel_pb";
import type { PostSessionRequest } from "./kernel_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service runme.kernel.v1.KernelService
 */
export interface IKernelServiceClient {
    /**
     * @generated from protobuf rpc: PostSession(runme.kernel.v1.PostSessionRequest) returns (runme.kernel.v1.PostSessionResponse);
     */
    postSession(input: PostSessionRequest, options?: RpcOptions): UnaryCall<PostSessionRequest, PostSessionResponse>;
    /**
     * @generated from protobuf rpc: DeleteSession(runme.kernel.v1.DeleteSessionRequest) returns (runme.kernel.v1.DeleteSessionResponse);
     */
    deleteSession(input: DeleteSessionRequest, options?: RpcOptions): UnaryCall<DeleteSessionRequest, DeleteSessionResponse>;
    /**
     * @generated from protobuf rpc: ListSessions(runme.kernel.v1.ListSessionsRequest) returns (runme.kernel.v1.ListSessionsResponse);
     */
    listSessions(input: ListSessionsRequest, options?: RpcOptions): UnaryCall<ListSessionsRequest, ListSessionsResponse>;
    /**
     * @generated from protobuf rpc: Execute(runme.kernel.v1.ExecuteRequest) returns (runme.kernel.v1.ExecuteResponse);
     */
    execute(input: ExecuteRequest, options?: RpcOptions): UnaryCall<ExecuteRequest, ExecuteResponse>;
    /**
     * @generated from protobuf rpc: ExecuteStream(runme.kernel.v1.ExecuteRequest) returns (stream runme.kernel.v1.ExecuteResponse);
     */
    executeStream(input: ExecuteRequest, options?: RpcOptions): ServerStreamingCall<ExecuteRequest, ExecuteResponse>;
    /**
     * @generated from protobuf rpc: Input(runme.kernel.v1.InputRequest) returns (runme.kernel.v1.InputResponse);
     */
    input(input: InputRequest, options?: RpcOptions): UnaryCall<InputRequest, InputResponse>;
    /**
     * @generated from protobuf rpc: Output(runme.kernel.v1.OutputRequest) returns (stream runme.kernel.v1.OutputResponse);
     */
    output(input: OutputRequest, options?: RpcOptions): ServerStreamingCall<OutputRequest, OutputResponse>;
    /**
     * @generated from protobuf rpc: IO(stream runme.kernel.v1.IORequest) returns (stream runme.kernel.v1.IOResponse);
     */
    iO(options?: RpcOptions): DuplexStreamingCall<IORequest, IOResponse>;
}
/**
 * @generated from protobuf service runme.kernel.v1.KernelService
 */
export declare class KernelServiceClient implements IKernelServiceClient, ServiceInfo {
    private readonly _transport;
    typeName: any;
    methods: any;
    options: any;
    constructor(_transport: RpcTransport);
    /**
     * @generated from protobuf rpc: PostSession(runme.kernel.v1.PostSessionRequest) returns (runme.kernel.v1.PostSessionResponse);
     */
    postSession(input: PostSessionRequest, options?: RpcOptions): UnaryCall<PostSessionRequest, PostSessionResponse>;
    /**
     * @generated from protobuf rpc: DeleteSession(runme.kernel.v1.DeleteSessionRequest) returns (runme.kernel.v1.DeleteSessionResponse);
     */
    deleteSession(input: DeleteSessionRequest, options?: RpcOptions): UnaryCall<DeleteSessionRequest, DeleteSessionResponse>;
    /**
     * @generated from protobuf rpc: ListSessions(runme.kernel.v1.ListSessionsRequest) returns (runme.kernel.v1.ListSessionsResponse);
     */
    listSessions(input: ListSessionsRequest, options?: RpcOptions): UnaryCall<ListSessionsRequest, ListSessionsResponse>;
    /**
     * @generated from protobuf rpc: Execute(runme.kernel.v1.ExecuteRequest) returns (runme.kernel.v1.ExecuteResponse);
     */
    execute(input: ExecuteRequest, options?: RpcOptions): UnaryCall<ExecuteRequest, ExecuteResponse>;
    /**
     * @generated from protobuf rpc: ExecuteStream(runme.kernel.v1.ExecuteRequest) returns (stream runme.kernel.v1.ExecuteResponse);
     */
    executeStream(input: ExecuteRequest, options?: RpcOptions): ServerStreamingCall<ExecuteRequest, ExecuteResponse>;
    /**
     * @generated from protobuf rpc: Input(runme.kernel.v1.InputRequest) returns (runme.kernel.v1.InputResponse);
     */
    input(input: InputRequest, options?: RpcOptions): UnaryCall<InputRequest, InputResponse>;
    /**
     * @generated from protobuf rpc: Output(runme.kernel.v1.OutputRequest) returns (stream runme.kernel.v1.OutputResponse);
     */
    output(input: OutputRequest, options?: RpcOptions): ServerStreamingCall<OutputRequest, OutputResponse>;
    /**
     * @generated from protobuf rpc: IO(stream runme.kernel.v1.IORequest) returns (stream runme.kernel.v1.IOResponse);
     */
    iO(options?: RpcOptions): DuplexStreamingCall<IORequest, IOResponse>;
}
